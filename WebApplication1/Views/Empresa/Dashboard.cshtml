@model WebApplication1.Models.EmpresaDashboardViewModel

@{
    ViewData["Title"] = "Dashboard - " + Model.NomeEmpresa;
}

<div class="mx-auto max-w-7xl px-4 py-8">
    <h1 class="mb-6 text-4xl font-bold">Dashboard - @Model.NomeEmpresa</h1>

    <!-- Alertas -->
    @if (Model.Alertas.Any())
    {
            <div class="mb-8 rounded border-l-4 border-red-600 bg-red-50 p-4">
                <div class="mb-2 font-semibold text-red-700">Atenção: dívidas muito atrasadas</div>
                <div class="space-y-2">
                @foreach (var a in Model.Alertas)
                {
                            <div class="flex flex-col md:flex-row md:justify-between items-start md:items-center gap-2">
                                <div class="text-sm">
                                    <span class="font-medium">@a.Titulo</span> de <span class="underline">@a.DevedorNome</span> está com 
                                    <span class="text-red-600">@a.DiasAtraso dias</span> de atraso (R$ @a.Valor.ToString("N2")).
                                </div>
                                <div>
                                    <a href="#" class="inline-block rounded bg-yellow-500 px-4 py-2 text-xs font-semibold text-white hover:bg-yellow-600 transition">
                                        Cobrar agora
                                    </a>
                                </div>
                            </div>
                }
                </div>
            </div>
    }

    <!-- KPIs principais -->
    <div class="mb-8 grid grid-cols-1 gap-y-8 gap-x-6 md:grid-cols-2 lg:grid-cols-3">
        <!-- Coluna 1: Situação dos Devedores -->
        <div class="space-y-4">
            <div class="rounded-xl border border-yellow-300 bg-yellow-100 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Pendentes</div>
                <div class="text-3xl font-extrabold text-yellow-800 text-center">@Model.Pendentes</div>
            </div>
            <div class="rounded-xl border border-red-300 bg-red-100 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Atrasadas</div>
                <div class="text-3xl font-extrabold text-red-800 text-center">@Model.Atrasadas</div>
            </div>
            <div class="rounded-xl border border-green-300 bg-green-100 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Quitadas</div>
                <div class="text-3xl font-extrabold text-green-800 text-center">@Model.Quitadas</div>
            </div>
        </div>

        <!-- Coluna 2: Totais -->
        <div class="space-y-4">
            <div class="rounded-xl border border-yellow-200 bg-yellow-50 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Devedores Totais</div>
                <div class="text-3xl font-extrabold text-yellow-800 text-center">@Model.TotalDevedores</div>
            </div>
            <div class="rounded-xl border border-red-200 bg-red-50 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Dívidas Totais</div>
                <div class="text-3xl font-extrabold text-red-800 text-center">@Model.TotalDividas</div>
            </div>
            <div class="rounded-xl border border-green-200 bg-green-50 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Valor Total Devido</div>
                <div class="text-3xl font-extrabold text-indigo-600 text-center">
                    R$ @((Model.Faturamento + Model.ValorEmAberto).ToString("N2"))
                </div>
            </div>
        </div>

        <!-- Coluna 3: Valores com toggle -->
        <div class="space-y-4">
            
            <div class="rounded-xl border border-yellow-100 bg-yellow-50 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Valor em Pendência</div>
                <div class="text-3xl font-extrabold text-yellow-800 text-center">R$ @Model.ValorPendente.ToString("N2")</div>
            </div>
            <div class="rounded-xl border border-red-100 bg-red-50 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Valor em Atraso</div>
                <div class="text-3xl font-extrabold text-red-800 text-center">R$ @Model.ValorAtrasado.ToString("N2")</div>
            </div>
            <div class="rounded-xl border border-green-100 bg-green-50 p-6 shadow-sm hover:shadow-lg transition">
                <div class="text-xs font-semibold text-gray-700 uppercase mb-2">Valor Quitado</div>
                <div class="text-3xl font-extrabold text-green-800 text-center">R$ @Model.ValorQuitado.ToString("N2")</div>
            </div>
        </div>
    </div>

    <!-- Notificações Recentes -->
    @if (Model.NotificacoesRecentes.Any())
    {
            <div class="mb-8 rounded-lg bg-white p-6 shadow">
                <h3 class="mb-3 text-lg font-semibold">Notificações Recentes</h3>
                <ul class="space-y-2">
                @foreach (var n in Model.NotificacoesRecentes.Take(5))
                {
                            <li class="flex justify-between">
                                <div class="text-sm">@n</div>
                            </li>
                }
                </ul>
            </div>
    }

    <!-- Gráficos principais lado a lado -->
    <div class="mb-8 grid grid-cols-1 gap-6 lg:grid-cols-2">
        <div class="flex flex-col rounded-lg bg-white p-6 shadow">
            <h2 class="mb-3 text-lg font-semibold">Status das Cobranças</h2>
            <div class="relative" style="height:260px; width:100%;">
                <canvas id="statusChart" class="h-full w-full"></canvas>
            </div>
        </div>
        <div class="rounded-lg bg-white p-6 shadow">
            <h2 class="mb-3 text-lg font-semibold">Aging (vencidas)</h2>
            <div class="relative" style="height:260px; width:100%;">
                <canvas id="agingChart" class="h-full w-full"></canvas>
            </div>
        </div>
    </div>

    <!-- Cobranças Recentes e Indicadores Extras lado a lado -->
    <div class="mb-8 grid grid-cols-1 gap-8 lg:grid-cols-2">
        <div class="rounded-lg bg-white p-6 shadow">
            <h3 class="mb-4 text-lg font-semibold">Cobranças Recentes</h3>
            <div class="overflow-x-auto">
                <table class="w-full text-left">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="p-2">Título</th>
                            <th class="p-2">Devedor</th>
                            <th class="p-2">Valor</th>
                            <th class="p-2">Vencimento</th>
                            <th class="p-2">Pagamento</th>
                            <th class="p-2">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var d in Model.Recentes)
                        {
                                <tr class="border-b">
                                    <td class="p-2">@d.Titulo</td>
                                    <td class="p-2">@d.Devedor?.Name</td>
                                    <td class="p-2">R$ @d.Valor.ToString("N2")</td>
                                    <td class="p-2">
                                    @(d.DataVencimento.HasValue ? d.DataVencimento.Value.ToString("dd/MM/yyyy") : "—")
                                    </td>
                                    <td class="p-2">
                                    @(d.DataPagamento.HasValue ? d.DataPagamento.Value.ToString("dd/MM/yyyy") : "—")
                                    </td>
                                    <td class="p-2">
                                        <span class="rounded px-2 py-1 text-xs font-semibold
                                        @(d.Status == "Quitado" ? "bg-green-100 text-green-800" :
                                          d.Status == "Vencido" ? "bg-red-100 text-red-800" :
                                          "bg-yellow-100 text-yellow-800")">
                                        @d.Status
                                        </span>
                                    </td>
                                </tr>
                        }
                        @if (!Model.Recentes.Any())
                        {
                                <tr>
                                    <td colspan="6" class="p-4 text-center text-gray-500">Nenhuma cobrança recente.</td>
                                </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="rounded-lg bg-white p-6 shadow">
            <h3 class="mb-4 text-lg font-semibold">Indicadores Extras</h3>
            <div class="grid grid-cols-1 gap-4">
                <div class="flex justify-between">
                    <div class="text-sm text-gray-600">Taxa de Recuperação</div>
                    <div class="font-bold">@Model.TaxaRecuperacaoPercent.ToString("F1") %</div>
                </div>
                <div class="flex justify-between">
                    <div class="text-sm text-gray-600">Tempo médio de pagamento</div>
                    <div class="font-bold">@Model.TempoMedioPagamentoDias.ToString("F1") dias</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Devedores abaixo -->
    <div class="mb-8 rounded-lg bg-white p-6 shadow">
        <h2 class="mb-4 text-lg font-semibold">Top Devedores</h2>
        <ul class="space-y-3">
            @foreach (var d in Model.TopDevedores)
            {
                    <li class="flex items-center justify-between border-b pb-2">
                        <div>
                            <div class="font-medium">@d.Devedor.Name</div>
                            <div class="text-xs text-gray-500">@d.Devedor.Email</div>
                        </div>
                        <div class="font-bold">R$ @d.TotalDevido.ToString("N2")</div>
                    </li>
            }
            @if (!Model.TopDevedores.Any())
            {
                    <li class="text-sm text-gray-500">Nenhum devedor com dívida em aberto.</li>
            }
        </ul>
    </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Status doughnut com percentual e número
    const statusCtx = document.getElementById('statusChart');
    new Chart(statusCtx, {
        type: 'doughnut',
        data: {
            labels: ['Pendentes', 'Atrasadas', 'Quitadas'],
            datasets: [{
                data: [@Model.Pendentes, @Model.Atrasadas, @Model.Quitadas],
                backgroundColor: ['#facc15', '#ef4444', '#10b981'],
                borderWidth: 0
            }]
        },
        options: {
            plugins: {
                legend: { position: 'bottom', labels: { usePointStyle: true } },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            const label = context.label || '';
                            const value = context.raw || 0;
                            const dataset = context.dataset;
                            const total = dataset.data.reduce((sum, v) => sum + v, 0);
                            const percent = total ? ((value / total) * 100).toFixed(1) : '0.0';
                            return `${label}: ${value} (${percent}%)`;
                        }
                    }
                }
            },
            responsive: true,
            maintainAspectRatio: false,
        }
    });

    // Aging bar
    const agingCtx = document.getElementById('agingChart');
    new Chart(agingCtx, {
        type: 'bar',
        data: {
            labels: ['0-30 dias', '31-60 dias', '>60 dias'],
            datasets: [{
                label: 'Valor vencido',
                data: [@Model.Aging["0-30"], @Model.Aging["31-60"], @Model.Aging[">60"]],
                backgroundColor: ['#f87171', '#fbbf24', '#f59e0b']
            }]
        },
        options: {
            plugins: { legend: { display: false } },
            scales: {
                y: { beginAtZero: true }
            },
            responsive: true,
            maintainAspectRatio: false,
        }
    });
</script>